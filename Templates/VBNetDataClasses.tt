<# // L2ST4 - LINQ to SQL templates for T4 v0.81 - http://www.codeplex.com/l2st4
// Copyright (c) Microsoft Corporation.  All rights reserved.
// This source code is made available under the terms of the Microsoft Public License (MS-PL)
#><#@ template language="C#v3.5" hostspecific="True"
#><#@ include file="L2ST4.ttinclude"
#><#@ output extension=".generated.vb"
#><# // Set options here
var options = new {
	DbmlFileName = Host.TemplateFile.Replace(".tt",".dbml"), // Which DBML file to operate on (same filename as template)
	SerializeDataContractSP1 = false, // Emit SP1 DataContract serializer attributes
	FilePerEntity = false, // Put each class into a separate file
	EntityFilePath = Path.GetDirectoryName(Host.TemplateFile) // Where to put the files	
};
var code = new VBCodeLanguage();
var data = new Data(options.DbmlFileName);
var manager = new Manager(Host, GenerationEnvironment, true) { OutputPath = options.EntityFilePath };
data.ContextNamespace = (new string[] { manager.GetCustomToolNamespace(data.DbmlFileName), data.SpecifiedContextNamespace }).FirstOrDefault(s => !String.IsNullOrEmpty(s));
data.EntityNamespace = (new string[] { manager.GetCustomToolNamespace(data.DbmlFileName), data.SpecifiedEntityNamespace }).FirstOrDefault(s => !String.IsNullOrEmpty(s));
manager.StartHeader();
#>'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by LINQ to SQL template for T4 VB.NET
'     Generated at <#=DateTime.Now#>
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------
Option Strict On
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
<#if (data.Functions.Count > 0) {#>
Imports System.Reflection
<#}
string dataContractAttributes = (options.SerializeDataContractSP1) ? "IsReference:=True" : "";
if (data.Serialization) {
#>Imports System.Runtime.Serialization
<#}#>

<#manager.EndHeader();
if (!String.IsNullOrEmpty(data.ContextNamespace)) {#>
Namespace <#=data.ContextNamespace#>
	
<#}#>
	<DatabaseAttribute(Name:="<#=data.DatabaseName#>")> _
	Partial <#=code.Format(data.TypeAttributes)#>Class <#=data.ContextName#>
		Inherits <#=data.BaseClassName#>
		
		Private Shared mappingSource As MappingSource = New AttributeMappingSource
		
		#Region "Extensibility Method Definitions"
		
		Partial Private Sub OnCreated()
		End Sub
		
<#	var tableOperations = new List<TableOperation>();
	foreach(var table in data.Tables)
		tableOperations.AddRange(table.Operations);
	foreach(Table table in data.Tables)
		foreach(OperationType operationType in Enum.GetValues(typeof(OperationType)))
			if (!tableOperations.Any(o => (o.Table == table) && (o.Type == operationType))) {#>
		Private Partial Sub <#=operationType#><#=table.BaseClass.Name#>(instance As <#=table.BaseClass.QualifiedName#> )
		End Sub
				
<#}#>
		#End Region
		
		#Region "Construction"
<#if (data.ConnectSettingsObject != null) {#>
		Public Sub New()
			MyBase.New(Global.<#=data.ConnectSettingsObject#>.Default.<#=data.ConnectSettingsProperty#>, mappingSource)
			OnCreated
		End Sub
<#}#>
		
		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String, ByVal mappingsource As MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		#End Region
<#if(data.Tables.Count > 0) {#>
		
		#Region "Tables"
		
<#foreach(Table table in data.Tables) {#>
		<#=code.GetAccess(table.BaseClass.TypeAttributes)#>ReadOnly Property <#=table.Member#> As Table(Of <#=table.BaseClass.QualifiedName#>)
			Get
				Return GetTable(Of <#=table.BaseClass.QualifiedName#>)
			End Get
		End Property
		
<#	}
#>		#End Region
<#}
if (data.Functions.Count > 0) {#>
		
		#Region "Functions"
		
<#	foreach(Function function in data.Functions) {
#>
		<FunctionAttribute(Name:="<#=function.Name#>"<#
		if (function.IsComposable) {#>, IsComposable:=True<#}
		#>)> _
<#		if (function.HasMultipleResults) {
			foreach(Class class1 in function.Classes) {#>
		<ResultType(GetType(<#=class1.QualifiedName#>))> _
<#			}
		}#>
		<#=code.Format(function.MemberAttributes)#>Function <#=function.Method#>(<#
		foreach(Parameter parameter in function.Parameters) {
		#><Parameter(Name:="<#=parameter.DbName#>", DbType:="<#=parameter.DbType#>")> <#=code.Format(parameter.Direction)#>[<#=parameter.Name#>] As <#=code.Format(parameter.Type)#><#
			if (parameter != function.Parameters.Last()) {#>, <#}
		}
		#>) As <#if (function.Return != null && function.Return.DbType != null) {#><Parameter(DbType:="<#=function.Return.DbType#>")> <#}#><#=code.Format(function.ReturnType)#>
<#		foreach(Parameter outParameter in function.Parameters.Where(p => p.Direction == ParameterDirection.Out)) {#>
			<#=outParameter.Name#> = CType(Nothing, <#=code.Format(outParameter.Type)#>)
<#		}#>
			Dim result As IExecuteResult = ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo)<#=String.Join("", function.Parameters.Select(p => ", [" + p.Name + "]").ToArray())#>)
<#		int paramIdx = 0;
		foreach(Parameter parameter in function.Parameters) {
			if (parameter.Direction != ParameterDirection.In) {#>
			<#=parameter.Name#> = CType(result.GetParameterValue(<#=paramIdx#>), <#=code.Format(parameter.Type)#>)
<#			}
			paramIdx++;
		}
#>			Return CType(result.ReturnValue,<#=code.Format(function.ReturnType)#>)
		End Function
		
<#	}#>
		#End Region
<#}#>		
<#	if (tableOperations.Count > 0) { #>
		#Region "Table Operations"
		
<#		foreach(var operation in tableOperations) { #>
		Private Sub <#=operation.Type#><#=operation.Table.BaseClass.Name#>(obj As <#=operation.Table.BaseClass.QualifiedName#>)
<#			if (operation.Arguments.Any(a => a.Version == ArgumentVersion.Original)) {
#>			Dim original = <#=operation.Table.Member#>.GetOriginalEntityState(obj)
<#			}
			int paramIdx = 1;
			foreach(var argument in operation.Arguments.Where(a => a.Parameter.Direction != ParameterDirection.In)) {
#>			Dim p<#=paramIdx++#> As <#=code.Format(argument.Parameter.Type)#> = obj.<#=argument.Member#>
<#			}#>
			If (<#=operation.Function.Method#>(<#
			paramIdx = 1;
			foreach(var argument in operation.Arguments) {
				switch(argument.Parameter.Direction) {
					case ParameterDirection.In:#><#=(argument.Version == ArgumentVersion.New) ? "obj" : "original"#>.<#=argument.Member#><#break;
					default:#>p<#=paramIdx++#><#break;
				}
			if (argument != operation.Arguments.Last()) {#>, <#}
			}
			#>) <> 1) Then
				Throw New ChangeConflictException
			End If
<#			paramIdx = 1;
			foreach(var argument in operation.Arguments.Where(a => a.Parameter.Direction != ParameterDirection.In)) {
#>			obj.<#=argument.Member#> = p<#=paramIdx++#>.GetValueOrDefault
<#			}#>
		End Sub
		
<#
		}
#>
		#End Region
		
<#	} #>
	End Class
<#
if (!String.IsNullOrEmpty(data.ContextNamespace)) {#>
	
End Namespace
<#}
foreach(Table table in data.Tables) {
	foreach(TableClass class1 in table.Classes) {
		manager.StartBlock(Path.ChangeExtension(class1.Name,".generated.vb"));	
		if (!String.IsNullOrEmpty(data.EntityNamespace)) {#>

Namespace <#=data.EntityNamespace#>	
<#		}
		if (data.Serialization && class1.IsSerializable) {
#>	
	<DataContract(<#=dataContractAttributes#>)> _
<#		}
		if (class1 == table.BaseClass) {#>
	<Table(Name:="<#=table.Name#>")> _
<#			foreach(TableClass subclass in data.TableClasses.Where(c => c.Table == table)) {
				if (!String.IsNullOrEmpty(subclass.InheritanceCode)) {#>
	<InheritanceMapping(Code:="<#=subclass.InheritanceCode#>", Type:=GetType(<#=subclass.Name#>)<# if (subclass.IsInheritanceDefault) {#>, IsDefault:=true<#}#>)> _
	<KnownType(GetType(<#=subclass.Name#>))> _
<#				}
			}
#>	Partial <#=code.Format(class1.TypeAttributes)#>Class <#=class1.Name#>
<#			if (!String.IsNullOrEmpty(data.EntityBase)) {
#>		Inherits <#=data.EntityBase#>
<#			}#>
		Implements INotifyPropertyChanging, INotifyPropertyChanged
		
		#Region "Property Change Event Handling"
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging
		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
		
		<#=code.Format(class1.PropertyChangeAccess)#>Sub SendPropertyChanging()
			If (Not PropertyChangingEvent Is Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		<#=code.Format(class1.PropertyChangeAccess)#>Sub SendPropertyChanged(ByVal propertyName As String)
			If (Not PropertyChangedEvent Is Nothing)
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		#End Region
		
<#		} else {
#>	Partial <#=code.Format(class1.TypeAttributes)#>Class <#=class1.Name#>
		Inherits <#=class1.SuperClass.Name#>
		
<#		}#>
		#Region "Extensibility Method Definitions"
		
		Partial Private Sub OnLoaded()
		End Sub
		
		Partial Private Sub OnValidate(ByVal action as ChangeAction)
		End Sub
<#		if (class1.HasPrimaryKey) {#>
		Partial Private Sub OnCreated()
		End Sub
<#		}#>		
		#End Region
		
		#Region "Construction"
		
		Public Sub New()
			MyBase.New
<#		if (data.Serialization) {
#>			Initialize
		End Sub
		
		Private Sub Initialize()
<#		}
		foreach(Association association in class1.Associations) {
#>			<#=association.Storage#> =<#
			if (association.IsMany) {
				#> New EntitySet(Of <#=association.Type.Name#>)(AddressOf attach_<#=association.Member#>, AddressOf detach_<#=association.Member#>)
<#			} else {
				#> CType(Nothing, EntityRef(Of <#=association.Type.Name#>))
<#			}
		}#>
<#		if (class1.HasPrimaryKey) {#>
			OnCreated
<#		}#>
		End Sub
		
		#End Region
<#		int dataMemberIndex = 1;
		if (class1.Columns.Count > 0) {#>
		
		#Region "Column Mappings"
		
<#			foreach(Column column in class1.Columns) {#>
		Partial Private Sub On<#=column.Member#>Changing(value As <#=code.Format(column.Type)#>)
		End Sub

		Partial Private Sub On<#=column.Member#>Changed()
		End Sub

		Private <#=column.Storage#> As <#=code.Format(column.StorageType)#>
		<Column(Storage:="<#=column.Storage#>"<#
				if (column.Name != column.Member) {#>, Name:="<#=column.Name#>"<#}
				if (column.AutoSync != AutoSync.Default) {#>, AutoSync:=AutoSync.<#=column.AutoSync.ToString()#><#}
				if (!String.IsNullOrEmpty(column.DbType)) {#>, DbType:="<#=column.DbType#>"<#}
				if (column.IsPrimaryKey) {#>, IsPrimaryKey:=True<#}
				if (column.IsDiscriminator) {#>, IsDiscriminator:=True<#}
				if (column.IsDbGenerated) {#>, IsDbGenerated:=True<#}
				if (column.IsVersion) {#>, IsVersion:=True<#}
				if (!column.CanBeNull && !column.IsPrimaryKey) {#>, CanBeNull:=False<#}
				if (column.UpdateCheck != UpdateCheck.Always) {#>, UpdateCheck:=UpdateCheck.<#=column.UpdateCheck.ToString()#><#}
			#>)> _
<#				if (data.Serialization && ((column.MemberAttributes & MemberAttributes.AccessMask) == MemberAttributes.Public)) {
#>		<DataMember(Order:=<#=dataMemberIndex++#>)> _
<#				}
#>			<#=code.Format(column.MemberAttributes)#>Property <#=column.Member#> As <#=code.Format(column.Type)#>
			Get
				Return <#=column.StorageValue#>
			End Get
			Set
<#				if (column.Type.IsGenericType) {#>
				If Not <#=column.StorageValue#>.Equals(value) Then
<#				} else {
					if (column.Type.IsValueType) {#>
				If <#=column.StorageValue#> <> value Then
<#					} else {
						if (column.Type.Equals(typeof(String))) {#>
				If Not String.Equals(<#=column.StorageValue#>,value) Then
<#						} else {#>
				If Not Object.Equals(<#=column.StorageValue#>,value) Then
<#						}
					}
				}#>
<#				if (column.ForeignKeyAssociations.Count > 0) {#>
					If (<#=String.Join(" OrElse ", column.ForeignKeyAssociations.Select(a => a.Storage + ".HasLoadedOrAssignedValue").ToArray())#>) Then
						Throw New ForeignKeyReferenceAlreadyHasValueException
					End If
<#				}#>
					On<#=column.Member#>Changing(value)
					SendPropertyChanging
					<#=column.StorageValue#> = value
					SendPropertyChanged("<#=column.Member#>")
					On<#=column.Member#>Changed
				End If
			End Set
		End Property
		
<#			}#>
		#End Region
<#		}#>
		
<#		bool needsSerializationFlag = class1.IsSerializable && class1.Associations.Any(a => !a.ManagesKeys);
		if (class1.Associations.Count > 0) {
#>
		#Region "Associations"
<#			foreach(Association association in class1.Associations) {#>
		
		Private <#=association.Storage#> As Entity<#= (association.IsMany) ? "Set" : "Ref" #>(Of <#=association.Type.Name#>)
		<Association(Name:="<#=association.Name#>"<#
			#>, Storage:="<#=association.Storage#>"<#
				if (association.ThisKeyMembers != null) {#>, ThisKey:="<#=String.Join(",", association.ThisKeyMembers)#>"<#}
				if (association.OtherKeyMembers != null) {#>, OtherKey:="<#=String.Join(",", association.OtherKeyMembers)#>"<#}
				if (association.IsForeignKey) {#>, IsForeignKey:=True<#}
				if (association.IsUnique) {#>, IsUnique:=True, IsForeignKey:=False<#}
				if (association.DeleteOnNull) {#>, DeleteOnNull:=True<#}
				if (association.DeleteRule != null) {#>, DeleteRule:="<#=association.DeleteRule#>"<#}
			#>)> _
<#				bool serialization = association.IsSerializable && data.Serialization &&
					(options.SerializeDataContractSP1 || !association.ManagesKeys);
				if (serialization) {
#>			<DataMember(Order:=<#=dataMemberIndex++#>, EmitDefaultValue:=False)> _
<#				}
				if (!association.IsMany) {#>
		<#=code.Format(association.MemberAttributes)#>Property <#=association.Member#> As <#=association.Type.Name#>
			Get
<#					if (needsSerializationFlag && serialization) {#>
				If (serializing AndAlso Not <#=association.Storage#>.HasLoadedOrAssignedValue) Then
					Return Nothing
				End If
<#					}#>
				Return <#=association.Storage#>.Entity
			End Get
			Set
				Dim previousValue As <#=association.Type.Name#> = <#=association.Storage#>.Entity
				If (Not Object.Equals(previousValue, value)<#if (association.OtherSide != null) {#> OrElse Not <#=association.Storage#>.HasLoadedOrAssignedValue<#}#>) Then
					SendPropertyChanging
<#					if (association.OtherSide != null) {#>
					If (Not previousValue Is Nothing) Then
						<#=association.Storage#>.Entity = Nothing
						previousValue.<#=association.OtherSide.Member#><#if (!association.OtherSide.IsMany) {#> = Nothing<#} else {#>.Remove(Me)<#}#> 
					End If
<#					}
#>					<#=association.Storage#>.Entity = value
<#					if (association.OtherSide != null) {#>
					If (value IsNot Nothing) Then
						value.<#=association.OtherSide.Member#><#if (!association.OtherSide.IsMany) {#> = Me<#} else {#>.Add(Me)<#}#> 
<#						if (association.ManagesKeys) {
							for(int keyIdx=0;keyIdx<association.ThisKey.Count();keyIdx++) {#>
							<#=association.ThisKey[keyIdx].Storage#> = value.<#=association.OtherKey[keyIdx].Member#>
<#							}#>
					Else
<#							for(int keyIdx=0;keyIdx<association.ThisKey.Count();keyIdx++) {#>
						<#=association.ThisKey[keyIdx].Storage#> = CType(Nothing, <#=code.Format(association.ThisKey[keyIdx].Type)#>)
<#							}
						}#>
					End If
<#					}#>
					SendPropertyChanged("<#=association.Member#>")
				End If
			End Set
		End Property
<#				} else {#>
		<#=code.Format(association.MemberAttributes)#>Property <#=association.Member#> As EntitySet(Of <#=association.Type.Name#>)
			Get
<#					if (needsSerializationFlag && serialization) {#>
				If (serializing AndAlso Not <#=association.Storage#>.HasLoadedOrAssignedValues) Then
					Return Nothing
				End If
<#					}
#>				Return <#=association.Storage#>
			End Get
			Set
				<#=association.Storage#>.Assign(value)
			End Set
		End Property
		
		Private Sub attach_<#=association.Member#>(ByVal entity As <#=association.Type.Name#>)
			SendPropertyChanging
			entity.<#=association.OtherSide.Member#> = Me
		End Sub
		
		Private Sub detach_<#=association.Member#>(ByVal entity As <#=association.Type.Name#>)
			SendPropertyChanging
			entity.<#=association.OtherSide.Member#> = Nothing
		End Sub
<#			}
		}#>
		
		#End Region
		
<#		}
		if (data.Serialization) {#>
		#region "Serialization"		
<#			if (needsSerializationFlag) {#>
		
		Private Serializing As Boolean
		
		<OnSerializing(), _
		 EditorBrowsableAttribute(EditorBrowsableState.Never)> _
		Public Sub OnSerializing(ByVal context As StreamingContext)
			serializing = True
		End Sub
		
		<OnSerialized(), _
		 EditorBrowsableAttribute(EditorBrowsableState.Never)> _
		Public Sub OnSerialized(ByVal context As StreamingContext)
			serializing = False
		End Sub
<#			}#>
		
		<OnDeserializing(), _
		 EditorBrowsableAttribute(EditorBrowsableState.Never)> _
		Public <#if (class1 != table.BaseClass) {#>Shadows<#}#> Sub OnDeserializing(ByVal context As StreamingContext)
			Initialize
		End Sub
		
		#End Region
<#		}#>
		
	End Class
<#		if (!String.IsNullOrEmpty(data.EntityNamespace)) {#>
	
End Namespace
<#		}
		manager.EndBlock();
	}
}
if (data.FunctionClasses.Count > 0) {
	foreach(FunctionClass class1 in data.FunctionClasses) {
		manager.StartBlock(Path.ChangeExtension(class1.Name,".generated.vb"));
		if(!String.IsNullOrEmpty(data.EntityNamespace)) {#>

Namespace <#=data.EntityNamespace#>
	
<#		}
		if (data.Serialization) {
#>	<DataContract(<#=dataContractAttributes#>)> _
<#		} #>
	<#=code.Format(class1.TypeAttributes)#>Partial Class <#=class1.Name#>
		
<#		int dataMemberIndex = 1;
		foreach(Column column in class1.Columns) {#>
		Private <#=column.Storage#> As <#=code.Format(column.Type)#>
		<Column(Storage:="<#=column.Storage#>"<#
				if (column.Name != column.Member) {#>, Name:="<#=column.Name#>"<#}
				if (!String.IsNullOrEmpty(column.DbType)) {#>, DbType:="<#=column.DbType#>"<#}
				if (!column.CanBeNull && !column.IsPrimaryKey) {#>, CanBeNull:=False<#}
			#>)> _
<#			if (data.Serialization && ((column.MemberAttributes & MemberAttributes.AccessMask) == MemberAttributes.Public)) {
#>		<DataMember(Order:=<#=dataMemberIndex++#>)> _
<#			}
#>		<#=code.Format(column.MemberAttributes)#>Property <#=column.Member#> As <#=code.Format(column.Type)#>
			Get
				Return <#=column.Storage#>
			End Get
			Set
<#				if (column.Type.IsGenericType) {#>
				If Not <#=column.Storage#>.Equals(value) Then
<#				} else {
					if (column.Type.IsValueType) {#>
				If <#=column.Storage#> <> value Then
<#					} else {
						if (column.Type.Equals(typeof(String))) {#>
				If Not String.Equals(<#=column.Storage#>,value) Then
<#						} else {#>
				If Not Object.Equals(<#=column.Storage#>,value) Then
<#						}
					}
				}#>
					<#=column.Storage#> = value
				End If
			End Set
		End Property
		
<#		}
#>	End Class
	
<#		if (!String.IsNullOrEmpty(data.EntityNamespace)) {#>
End Namespace
<#		}
		manager.EndBlock();
	}	
}
manager.Process(options.FilePerEntity);#>